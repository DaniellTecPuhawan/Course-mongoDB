show dbs
use database

db.database.insertOne({"name":"name", "age": 10})

Example
db.dbtest.insertOne({"name":"Cult Of The Lamb", "genre":["Action", "Adventure", "Indie", "Strategy"], "developer":"Massive Monster", "Platforms":["PC", "PS4"]})

db.database.find()
db.database.find().pretty()

BSON => Binary JSON, more efficent storage

Example

db.dbtest.insertOne({name:"F.I.S.T", genre:["Action", "Adventure", "Indie", "RPG", "Simulation"],developer:"TiGames",platforms:["PC", "PS4"]})

*To replace an id must be "_id": (id)

CRUD OPERATIONS =>

CREATE

- insertOne(data,options)
- insertMany(data,options)

READ

- find(filter,options)
- findOne(filter,filter)

UPDATE

- updateOne(filter, data,options)
- updateMany(filter, data,options)

DELETE

- deleteOne(filter,options)
- deleteMany(filter,filter)


deleteOne

db.dbtest.deleteOne({name:"Spyro"}) Can be the _id
db.dbtest.deleteOne({_id: ObjectId('66ce2f846d1542f91a080b05')})

updateOne

Add data $set 
db.dbtest.updateOne({ name: "F.I.S.T" }, { $set: { tags: "Metroidvania" } }) 
db.dbtest.updateOne({ name: "Cult Of The Lamb" }, { $set: { tags: "Roguelike" } })

db.dbtest.updateOne({ name: "Hollow Knight" }, { $set: { tags: "Metroidvania" } }) 
db.dbtest.updateOne({ name: "Unravel" }, { $set: { tags: "Puzzles" } })

Update data $rename
db.dbtest.updateOne( {"_id": ObjectId ('66ce26196d1542f91a080b02') },{ $rename: { Platforms: "platforms" } }  ) 

insertMany

db.dbtest.insertMany([{"name": "Hollow Knight","genre": ["Action", "Adventure", "Indie"],"developer": "Team Cherry","platforms": ["PC", "PS4"]},{"name": "Unravel","genre": ["Action", "Adventure"],"developer": "Coldwood Interactive","platforms": ["PC", "PS4"]}])


toArray
db.pruebaDB.find().toArray


forEach
db.pruebaDB.find().forEach( (pruebaData) => { printjson  ( pruebaData  )   }    )


Index

db.dbtest.find({}, {"name":1}).pretty()

Array
dbtest> db.dbtest.updateOne({ name: "Unravel" }, { $set: { tags: ["Puzzles", "Platform"] } })

Index

db.dbtest.findOne({"name": "F.I.S.T"}).genre
db.dbtest.find({"name": "F.I.S.T"}).pretty()


Drop

use database
db.dropDatabase()

Schemas => Very different, Extra data or Full equality


Text
"Text"

boolean
True/False


Integer(int32)
25

NumberLong(int64)
1000000000

NumberDecimal
25.04

ObjectId
Unique

Embedded Document
("a", { } )

Array
("a", [ ] )

ISODate
ISODate("2024-09-03")

Timestamp
Timestamp(?)

Example

db.collectionName.insertOne({
  _id: ObjectId('66d75dc17dba6dff0775bdb9'),
  name: 'create1',
  created: true,
  details: [{ state: 'new' }, { creationStatus: 'recently' }],
  creatingDate: ISODate('2024-09-03T19:04:33.715Z'),
  createdAt: Timestamp(1725390273, 1)
});

- One to One

db.personsDB.insertOne({name: "test", age:24})

db.carsDB.insertOne({model: "BMW", price:24000, owner: ObjectId('66e20645eeb4c2fae7bcb27b') })

- One to Many

db.questionsDB.insertOne({creator: "test", question: "question", answers:["q1","q2"]})

db.questionsDB.findOne()

db.answersDB.insertMany([{_id:"q1", text:"text1"},{_id:"q2", text:"text2"}])

db.answersDB.find()


$lookup

El operador $lookup es muy poderoso para combinar datos de múltiples colecciones sin necesidad de 
realizar múltiples consultas, y es útil cuando se necesita realizar análisis o informes 
complejos en MongoDB.

Example

db.lookup.aggregate([
  {
    $lookup: {
      from: "lookups",       // Colección con la que nos unimos
      localField: "lookup", // Campo en la colección 'orders'
      foreignField: "_id",      // Campo en la colección 'products'
      as: "lookupDetails"      // Nombre del nuevo campo con el resultado combinado
    }
  }
]);

db.lookup.aggregate([{$lookup: {from: "lookups", localField: "lookups", foreignField: "_id", as: "lookupsDetails"  }}]);


Example:

db.userCommentsDB.insertMany([{name:"test1", age:24, email:"test1@test.com"}, {name:"test2", age:25, email:"test2@test.com"}])
db.userCommentsDB.find().pretty()
db.postCommentsDB.insertOne({title:"Test post", text:"test", tag:["new, first comment"], owner: ObjectId('66e2f121eeb4c2fae7bcb282'), comments:["liked", "congrats"], owner:ObjectId('66e2f121eeb4c2fae7bcb281')})
db.postCommentsDB.findOne()


db.createCollection('postsDB',{validator:{$jsonSchema:{bsonType:'object',required:['title','text','creator','comments'],properties:{title:{bsonType:'string',description:'must be a string and is required'},text:{bsonType:'string',description:'must be a string and is required'},creator:{bsonType:'objectId',description:'must be an objectid and is required'},comments:{bsonType:'array',description:'must be an array and is required',items:{bsonType:'object',required:['text','author'],properties:{text:{bsonType:'string',description:'must be a string and is required'},author:{bsonType:'objectId',description:'must be an objectid and is required'}}}}}}}});


BulkWriteResult

db.pruebaDB.bulkWrite([{ insertOne: { document: { name: "bulkTest1" } } },{ insertOne: { document: { name: "bulkTest2" } } }])


writeConcern

w: "majority": Espera a que una mayoría de nodos confirme la escritura, proporcionando más seguridad en entornos de replicación.
j: false: No espera la confirmación del journal, lo que mejora el rendimiento a cambio de un mayor riesgo de pérdida de datos 
en caso de un fallo abrupto.

db.pruebaDB.insertOne({name:"writeConcern1"}, {writeConcern:{w:0}})
db.pruebaDB.insertOne({name:"writeConcern2"}, {writeConcern:{w:1}})
db.pruebaDB.insertOne({name:"writeConcern3"}, {writeConcern:{w:1, j:false}})
db.pruebaDB.insertOne({name:"writeConcern4"}, {writeConcern:{w:1, j:true}})