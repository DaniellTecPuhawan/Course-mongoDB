show dbs
use database

db.database.insertOne({"name":"name", "age": 10})

Example
db.dbtest.insertOne({"name":"Cult Of The Lamb", "genre":["Action", "Adventure", "Indie", "Strategy"], "developer":"Massive Monster", "Platforms":["PC", "PS4"]})

db.database.find()
db.database.find().pretty()

BSON => Binary JSON, more efficent storage

Example

db.dbtest.insertOne({name:"F.I.S.T", genre:["Action", "Adventure", "Indie", "RPG", "Simulation"],developer:"TiGames",platforms:["PC", "PS4"]})

*To replace an id must be "_id": (id)

CRUD OPERATIONS =>

CREATE

- insertOne(data,options)
- insertMany(data,options)

READ

- find(filter,options)
- findOne(filter,filter)

UPDATE

- updateOne(filter, data,options)
- updateMany(filter, data,options)

DELETE

- deleteOne(filter,options)
- deleteMany(filter,filter)


deleteOne

db.dbtest.deleteOne({name:"Spyro"}) Can be the _id
db.dbtest.deleteOne({_id: ObjectId('66ce2f846d1542f91a080b05')})

updateOne

Add data $set 
db.dbtest.updateOne({ name: "F.I.S.T" }, { $set: { tags: "Metroidvania" } }) 
db.dbtest.updateOne({ name: "Cult Of The Lamb" }, { $set: { tags: "Roguelike" } })

db.dbtest.updateOne({ name: "Hollow Knight" }, { $set: { tags: "Metroidvania" } }) 
db.dbtest.updateOne({ name: "Unravel" }, { $set: { tags: "Puzzles" } })

Update data $rename
db.dbtest.updateOne( {"_id": ObjectId ('66ce26196d1542f91a080b02') },{ $rename: { Platforms: "platforms" } }  ) 

insertMany

db.dbtest.insertMany([{"name": "Hollow Knight","genre": ["Action", "Adventure", "Indie"],"developer": "Team Cherry","platforms": ["PC", "PS4"]},{"name": "Unravel","genre": ["Action", "Adventure"],"developer": "Coldwood Interactive","platforms": ["PC", "PS4"]}])


toArray
db.pruebaDB.find().toArray


forEach
db.pruebaDB.find().forEach( (pruebaData) => { printjson  ( pruebaData  )   }    )


Index

db.dbtest.find({}, {"name":1}).pretty()

Array
dbtest> db.dbtest.updateOne({ name: "Unravel" }, { $set: { tags: ["Puzzles", "Platform"] } })

Index

db.dbtest.findOne({"name": "F.I.S.T"}).genre
db.dbtest.find({"name": "F.I.S.T"}).pretty()


Drop

use database
db.dropDatabase()

Schemas => Very different, Extra data or Full equality


Text
"Text"

boolean
True/False


Integer(int32)
25

NumberLong(int64)
1000000000

NumberDecimal
25.04

ObjectId
Unique

Embedded Document
("a", { } )

Array
("a", [ ] )

ISODate
ISODate("2024-09-03")

Timestamp
Timestamp(?)

Example

db.collectionName.insertOne({
  _id: ObjectId('66d75dc17dba6dff0775bdb9'),
  name: 'create1',
  created: true,
  details: [{ state: 'new' }, { creationStatus: 'recently' }],
  creatingDate: ISODate('2024-09-03T19:04:33.715Z'),
  createdAt: Timestamp(1725390273, 1)
});

- One to One

db.personsDB.insertOne({name: "test", age:24})

db.carsDB.insertOne({model: "BMW", price:24000, owner: ObjectId('66e20645eeb4c2fae7bcb27b') })

- One to Many

db.questionsDB.insertOne({creator: "test", question: "question", answers:["q1","q2"]})

db.questionsDB.findOne()

db.answersDB.insertMany([{_id:"q1", text:"text1"},{_id:"q2", text:"text2"}])

db.answersDB.find()


$lookup

El operador $lookup es muy poderoso para combinar datos de múltiples colecciones sin necesidad de 
realizar múltiples consultas, y es útil cuando se necesita realizar análisis o informes 
complejos en MongoDB.

Example

db.lookup.aggregate([
  {
    $lookup: {
      from: "lookups",       // Colección con la que nos unimos
      localField: "lookup", // Campo en la colección 'orders'
      foreignField: "_id",      // Campo en la colección 'products'
      as: "lookupDetails"      // Nombre del nuevo campo con el resultado combinado
    }
  }
]);

db.lookup.aggregate([{$lookup: {from: "lookups", localField: "lookups", foreignField: "_id", as: "lookupsDetails"  }}]);


Example:

db.userCommentsDB.insertMany([{name:"test1", age:24, email:"test1@test.com"}, {name:"test2", age:25, email:"test2@test.com"}])
db.userCommentsDB.find().pretty()
db.postCommentsDB.insertOne({title:"Test post", text:"test", tag:["new, first comment"], owner: ObjectId('66e2f121eeb4c2fae7bcb282'), comments:["liked", "congrats"], owner:ObjectId('66e2f121eeb4c2fae7bcb281')})
db.postCommentsDB.findOne()


db.createCollection('postsDB',{validator:{$jsonSchema:{bsonType:'object',required:['title','text','creator','comments'],properties:{title:{bsonType:'string',description:'must be a string and is required'},text:{bsonType:'string',description:'must be a string and is required'},creator:{bsonType:'objectId',description:'must be an objectid and is required'},comments:{bsonType:'array',description:'must be an array and is required',items:{bsonType:'object',required:['text','author'],properties:{text:{bsonType:'string',description:'must be a string and is required'},author:{bsonType:'objectId',description:'must be an objectid and is required'}}}}}}}});


BulkWriteResult

db.pruebaDB.bulkWrite([{ insertOne: { document: { name: "bulkTest1" } } },{ insertOne: { document: { name: "bulkTest2" } } }])


writeConcern

w: "majority": Espera a que una mayoría de nodos confirme la escritura, proporcionando más seguridad en entornos de replicación.
j: false: No espera la confirmación del journal, lo que mejora el rendimiento a cambio de un mayor riesgo de pérdida de datos 
en caso de un fallo abrupto.

w: 0: No espera ninguna confirmación. Máximo rendimiento, pero sin garantías de éxito.
w: 1: Espera confirmación del nodo primario. Garantiza que la escritura ha sido exitosa en el nodo primario.
w: 1, j: false: Espera confirmación del nodo primario, pero no del journal en disco. Menos durabilidad, pero mejor rendimiento.
w: 1, j: true: Espera confirmación del nodo primario y también asegura que la escritura ha sido almacenada en el journal del disco. Mayor durabilidad y seguridad de los datos.

db.pruebaDB.insertOne({name:"writeConcern1"}, {writeConcern:{w:0}})
db.pruebaDB.insertOne({name:"writeConcern2"}, {writeConcern:{w:1}})
db.pruebaDB.insertOne({name:"writeConcern3"}, {writeConcern:{w:1, j:false}})
db.pruebaDB.insertOne({name:"writeConcern4"}, {writeConcern:{w:1, j:true}})

Atomicity, prevents error when insertOne


Example

use companyTest
db.companies.insertOne({name:"Fresh Food Inc", stock: 25, _id:1})
db.companies.insertMany([{name:"Smart Cat Inc", stock:200, _id:2},{name: "Heavy Bear Inc", stock:50, _id:3}])
db.companies.find().pretty()
db.companies.insertMany([{name:"Fresh Air Inc", stock:10, _id:1},{name: "Cool Food Inc", stock:50, _id:4}])
db.companies.insertMany([{name:"Smart Cat Inc", stock:200, _id:1},{name: "Heavy Bear Inc", stock:50, _id:4}], {ordered: false})
db.companies.find().pretty()
db.companies.insertOne({name: "Magic Tables", stock:150}, {writeConcern: {w:1, j:false}})


Import Json

mongoimport azir-list.json -d azirList -c azirlist --jsonArray --drop

C:\Users\iamca\Desktop\Course-mongoDB\azir-list.json -d azirList -c azirlist --jsonArray --drop

- mongoimport: Es la herramienta de MongoDB que se utiliza para importar datos desde 
un archivo externo a una base de datos de MongoDB.

-d azirList: Especifica el nombre de la base de datos a la que se importarán los datos. Aquí, la base de datos se llama azirList

-c azirlist: Especifica el nombre de la colección dentro de la base de datos a la que se van a importar los datos. 

--jsonArray: Indica que el archivo azir-list.json contiene un array de objetos JSON.

--drop: Esta opción le dice a MongoDB que elimine la colección azirlist antes de importar los datos.

db.azirlist.insertMany([{"name":"Azir","role":"Mage","abilities":[{"name":"Shurima's Legacy","description":"Summons a turret from the ruins of an allied turret."},{"name":"Conquering Sands","description":"Commands soldiers to charge in a line."},{"name":"Arise!","description":"Summons a Sand Soldier to attack enemies."},{"name":"Shifting Sands","description":"Dashes to one of his soldiers."},{"name":"Emperor's Divide","description":"Summons a wall of soldiers to knock back enemies."}]}])

show collections



Operators:

db.numbersDB.insertMany([{"numero": 1}, {"numero": 2}, {"numero": 3}, {"numero": 4}, {"numero": 5}, {"numero": 6}, {"numero": 7}, {"numero": 8}, {"numero": 9}, {"numero": 10}])

OPERATORS

Operadores de comparación
$eq: Igual a (Equal to)
$ne: No igual a (Not equal to)
$gt: Mayor que (Greater than)
$gte: Mayor o igual que (Greater than or equal to)
$lt: Menor que (Less than)
$lte: Menor o igual que (Less than or equal to)

db.numbersDB.find().count()

db.numbersDB.find({numero: { $gt: 3  }})
db.numbersDB.find({numero: { $lt: 8  }})  
db.numbersDB.find({$and: [{ numero: { $gt: 3 } }, { numero: { $lt: 8 } }]});
db.numbersDB.find({numero: { $not: { $gt: 6 } }});
db.numbersDB.find({ numero: { $ne: 5 } });
db.numbersDB.find({ numero: { $type: "int" } }); //ver elementos que cumplan el filtro

db.operatorsDB.insertMany([{
      nombre: "Juan",            
      edad: 25,                  
      activo: true,             
      direccion: {               
         calle: "Calle Falsa 123",
         ciudad: "Madrid",
         codigo_postal: 28001
      },
      contacto: {                
         email: "juan@example.com",
         telefono: "123456789"
      },
      preferencias: {            
         suscripcion: true,
         temas: ["tecnología", "deporte"]
      }
   },
   {
      nombre: "Ana",
      edad: 30,                  
      activo: false,            
      direccion: {              
         calle: "Avenida Siempreviva 742",
         ciudad: "Barcelona",
         codigo_postal: 08001
      },
      empleo: {                  
         puesto: "Ingeniera de Software",
         empresa: "Tech Solutions"
      },
      preferencias: {
         suscripcion: false,
         temas: ["arte", "música"]
      }
   },
   {
      nombre: "Luis",
      edad: 40,
      activo: true,
      direccion: {
         calle: "Gran Vía 15",
         ciudad: "Valencia",
         codigo_postal: 46001
      },
      contacto: {
         email: "luis@example.com",
         telefono: "987654321"
      },
      empleo: {
         puesto: "Analista de Datos",
         empresa: "Data Insights"
      }
   }
]);

db.operatorsDB.insertMany([{nombre: "Juan", edad: 25, activo: true, direccion: {calle: "Calle Falsa 123", ciudad: "Madrid", codigo_postal: 28001}, contacto: {email: "juan@example.com", telefono: "123456789"}, preferencias: {suscripcion: true, temas: ["tecnología", "deporte"]}}, {nombre: "Ana", edad: 30, activo: false, direccion: {calle: "Avenida Siempreviva 742", ciudad: "Barcelona", codigo_postal: 08001}, empleo: {puesto: "Ingeniera de Software", empresa: "Tech Solutions"}, preferencias: {suscripcion: false, temas: ["arte", "música"]}}, {nombre: "Luis", edad: 40, activo: true, direccion: {calle: "Gran Vía 15", ciudad: "Valencia", codigo_postal: 46001}, contacto: {email: "luis@example.com", telefono: "987654321"}, empleo: {puesto: "Analista de Datos", empresa: "Data Insights"}}]);



$jsonSchema

db.dbtest.find( {tags: {$regex: /Roguelike/}}  ).pretty()

db.dbtest.find( {$expr: {$gt:["Metroidvania", "Puzzles"]} }  ).pretty() ??



db.officeDB.insertMany[ { "title":  "The Last Student Returns", "meta": { "rating": 9.5, "aired": 2018, "runtime": 100 }, "visitors": 1300000, "expectedVisitors": 1550000, "genre": ["thriller", "drama", "action"] }, { "title": "Supercharged Teaching", "meta": { "rating": 9.3, "aired": 2016, "runtime": 60 }, "visitors": 370000, "expectedVisitors": 1000000, "genre": ["thriller", "action"] }, { "title": "Teach me if you can", "meta": { "rating": 8.5, "aired": 2014, "runtime": 90 }, "visitors": 590378, "expectedVisitors": 500000, "genre": ["action", "thriller"] } ]

db.officeDB.find({$and: [{ "meta.rating": { $gt: 9.2 } }, { "meta.runtime": { $lt: 100 } }]});

db.officeDB.find({ genre: { $all: ["drama", "action"] } })

db.officeDB.find({ $expr: { $gt: ["$visitors", "$expectedVisitors"] } });


